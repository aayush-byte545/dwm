# --- Step 1: Import necessary libraries ---
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import confusion_matrix, accuracy_score
import matplotlib.pyplot as plt

# --- Step 2: Load and prepare the dataset ---
# Make sure 'Social_Network_Ads.csv' is in the same folder.
dataset = pd.read_csv('Social_Network_Ads.csv')

# Encode categorical column (e.g., Gender)
# Converts Male/Female -> 1/0
le = LabelEncoder()
dataset['Gender'] = le.fit_transform(dataset['Gender'])

# Separate features (X) and target (y)
X = dataset.iloc[:, :-1].values   # All columns except last one
y = dataset.iloc[:, -1].values    # Last column is the target

# --- Step 3: Split data into Training and Test sets ---
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=0
)

# --- Step 4: Feature Scaling ---
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# --- Step 5: Train the Decision Tree model ---
# criterion='entropy' measures the quality of a split using Information Gain
classifier = DecisionTreeClassifier(criterion='entropy', random_state=0)
classifier.fit(X_train, y_train)

# --- Step 6: Make predictions on the test data ---
y_pred = classifier.predict(X_test)

# --- Step 7: Evaluate the model's performance ---
cm = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)

print("--- Decision Tree Results ---")
print("Confusion Matrix:")
print(cm)
print(f"\nAccuracy: {accuracy * 100:.2f}%")

# --- Step 8 (Optional): Visualize the Decision Tree ---
plt.figure(figsize=(12, 8))
plot_tree(
    classifier,
    feature_names=dataset.columns[:-1],
    class_names=['No Purchase', 'Purchase'],
    filled=True,
    rounded=True,
    fontsize=10
)
plt.title("Decision Tree Visualization")
plt.show()

